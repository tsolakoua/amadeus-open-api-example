# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TravelTestTripCondition(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "destinationCountry",
        }
        
        class properties:
            destinationCountry = schemas.StrSchema
            
            
            class countries(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Area']:
                        return Area
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Area'], typing.List['Area']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'countries':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Area':
                    return super().__getitem__(i)
            destinationCity = schemas.StrSchema
            transitCountry = schemas.StrSchema
            transitCity = schemas.StrSchema
            __annotations__ = {
                "destinationCountry": destinationCountry,
                "countries": countries,
                "destinationCity": destinationCity,
                "transitCountry": transitCountry,
                "transitCity": transitCity,
            }
    
    destinationCountry: MetaOapg.properties.destinationCountry
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationCountry"]) -> MetaOapg.properties.destinationCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["countries"]) -> MetaOapg.properties.countries: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["destinationCity"]) -> MetaOapg.properties.destinationCity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitCountry"]) -> MetaOapg.properties.transitCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transitCity"]) -> MetaOapg.properties.transitCity: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["destinationCountry", "countries", "destinationCity", "transitCountry", "transitCity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationCountry"]) -> MetaOapg.properties.destinationCountry: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["countries"]) -> typing.Union[MetaOapg.properties.countries, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["destinationCity"]) -> typing.Union[MetaOapg.properties.destinationCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitCountry"]) -> typing.Union[MetaOapg.properties.transitCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transitCity"]) -> typing.Union[MetaOapg.properties.transitCity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["destinationCountry", "countries", "destinationCity", "transitCountry", "transitCity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        destinationCountry: typing.Union[MetaOapg.properties.destinationCountry, str, ],
        countries: typing.Union[MetaOapg.properties.countries, list, tuple, schemas.Unset] = schemas.unset,
        destinationCity: typing.Union[MetaOapg.properties.destinationCity, str, schemas.Unset] = schemas.unset,
        transitCountry: typing.Union[MetaOapg.properties.transitCountry, str, schemas.Unset] = schemas.unset,
        transitCity: typing.Union[MetaOapg.properties.transitCity, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelTestTripCondition':
        return super().__new__(
            cls,
            *_args,
            destinationCountry=destinationCountry,
            countries=countries,
            destinationCity=destinationCity,
            transitCountry=transitCountry,
            transitCity=transitCity,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.area import Area
