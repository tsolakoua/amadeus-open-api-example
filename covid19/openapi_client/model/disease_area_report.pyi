# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class DiseaseAreaReport(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            type = schemas.StrSchema
        
            @staticmethod
            def area() -> typing.Type['Area']:
                return Area
            
            
            class subAreas(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['DiseaseAreaReport']:
                        return DiseaseAreaReport
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['DiseaseAreaReport'], typing.List['DiseaseAreaReport']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'subAreas':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'DiseaseAreaReport':
                    return super().__getitem__(i)
        
            @staticmethod
            def summary() -> typing.Type['DatedInformation']:
                return DatedInformation
        
            @staticmethod
            def dataSources() -> typing.Type['DataSources']:
                return DataSources
            
            
            class relatedArea(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Link']:
                        return Link
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Link'], typing.List['Link']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'relatedArea':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Link':
                    return super().__getitem__(i)
            
            
            class areaVaccinated(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AreaVaccinated']:
                        return AreaVaccinated
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AreaVaccinated'], typing.List['AreaVaccinated']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'areaVaccinated':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AreaVaccinated':
                    return super().__getitem__(i)
        
            @staticmethod
            def hotspots() -> typing.Type['DatedInformation']:
                return DatedInformation
        
            @staticmethod
            def diseaseCases() -> typing.Type['DiseaseCase']:
                return DiseaseCase
        
            @staticmethod
            def diseaseInfection() -> typing.Type['DiseaseInfection']:
                return DiseaseInfection
        
            @staticmethod
            def diseaseRiskLevel() -> typing.Type['DatedInformation']:
                return DatedInformation
        
            @staticmethod
            def AreaPolicy() -> typing.Type['AreaPolicy']:
                return AreaPolicy
        
            @staticmethod
            def areaAccessRestriction() -> typing.Type['AreaAccessRestriction']:
                return AreaAccessRestriction
            
            
            class areaRestrictions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['AreaRestrictions']:
                        return AreaRestrictions
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['AreaRestrictions'], typing.List['AreaRestrictions']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'areaRestrictions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'AreaRestrictions':
                    return super().__getitem__(i)
            __annotations__ = {
                "type": type,
                "area": area,
                "subAreas": subAreas,
                "summary": summary,
                "dataSources": dataSources,
                "relatedArea": relatedArea,
                "areaVaccinated": areaVaccinated,
                "hotspots": hotspots,
                "diseaseCases": diseaseCases,
                "diseaseInfection": diseaseInfection,
                "diseaseRiskLevel": diseaseRiskLevel,
                "AreaPolicy": AreaPolicy,
                "areaAccessRestriction": areaAccessRestriction,
                "areaRestrictions": areaRestrictions,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> MetaOapg.properties.type: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["area"]) -> 'Area': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["subAreas"]) -> MetaOapg.properties.subAreas: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["summary"]) -> 'DatedInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dataSources"]) -> 'DataSources': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["relatedArea"]) -> MetaOapg.properties.relatedArea: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaVaccinated"]) -> MetaOapg.properties.areaVaccinated: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hotspots"]) -> 'DatedInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diseaseCases"]) -> 'DiseaseCase': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diseaseInfection"]) -> 'DiseaseInfection': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["diseaseRiskLevel"]) -> 'DatedInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["AreaPolicy"]) -> 'AreaPolicy': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaAccessRestriction"]) -> 'AreaAccessRestriction': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaRestrictions"]) -> MetaOapg.properties.areaRestrictions: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["type", "area", "subAreas", "summary", "dataSources", "relatedArea", "areaVaccinated", "hotspots", "diseaseCases", "diseaseInfection", "diseaseRiskLevel", "AreaPolicy", "areaAccessRestriction", "areaRestrictions", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union[MetaOapg.properties.type, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["area"]) -> typing.Union['Area', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["subAreas"]) -> typing.Union[MetaOapg.properties.subAreas, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["summary"]) -> typing.Union['DatedInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dataSources"]) -> typing.Union['DataSources', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["relatedArea"]) -> typing.Union[MetaOapg.properties.relatedArea, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaVaccinated"]) -> typing.Union[MetaOapg.properties.areaVaccinated, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hotspots"]) -> typing.Union['DatedInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diseaseCases"]) -> typing.Union['DiseaseCase', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diseaseInfection"]) -> typing.Union['DiseaseInfection', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["diseaseRiskLevel"]) -> typing.Union['DatedInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["AreaPolicy"]) -> typing.Union['AreaPolicy', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaAccessRestriction"]) -> typing.Union['AreaAccessRestriction', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaRestrictions"]) -> typing.Union[MetaOapg.properties.areaRestrictions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["type", "area", "subAreas", "summary", "dataSources", "relatedArea", "areaVaccinated", "hotspots", "diseaseCases", "diseaseInfection", "diseaseRiskLevel", "AreaPolicy", "areaAccessRestriction", "areaRestrictions", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        type: typing.Union[MetaOapg.properties.type, str, schemas.Unset] = schemas.unset,
        area: typing.Union['Area', schemas.Unset] = schemas.unset,
        subAreas: typing.Union[MetaOapg.properties.subAreas, list, tuple, schemas.Unset] = schemas.unset,
        summary: typing.Union['DatedInformation', schemas.Unset] = schemas.unset,
        dataSources: typing.Union['DataSources', schemas.Unset] = schemas.unset,
        relatedArea: typing.Union[MetaOapg.properties.relatedArea, list, tuple, schemas.Unset] = schemas.unset,
        areaVaccinated: typing.Union[MetaOapg.properties.areaVaccinated, list, tuple, schemas.Unset] = schemas.unset,
        hotspots: typing.Union['DatedInformation', schemas.Unset] = schemas.unset,
        diseaseCases: typing.Union['DiseaseCase', schemas.Unset] = schemas.unset,
        diseaseInfection: typing.Union['DiseaseInfection', schemas.Unset] = schemas.unset,
        diseaseRiskLevel: typing.Union['DatedInformation', schemas.Unset] = schemas.unset,
        AreaPolicy: typing.Union['AreaPolicy', schemas.Unset] = schemas.unset,
        areaAccessRestriction: typing.Union['AreaAccessRestriction', schemas.Unset] = schemas.unset,
        areaRestrictions: typing.Union[MetaOapg.properties.areaRestrictions, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DiseaseAreaReport':
        return super().__new__(
            cls,
            *_args,
            type=type,
            area=area,
            subAreas=subAreas,
            summary=summary,
            dataSources=dataSources,
            relatedArea=relatedArea,
            areaVaccinated=areaVaccinated,
            hotspots=hotspots,
            diseaseCases=diseaseCases,
            diseaseInfection=diseaseInfection,
            diseaseRiskLevel=diseaseRiskLevel,
            AreaPolicy=AreaPolicy,
            areaAccessRestriction=areaAccessRestriction,
            areaRestrictions=areaRestrictions,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.area import Area
from openapi_client.model.area_access_restriction import AreaAccessRestriction
from openapi_client.model.area_policy import AreaPolicy
from openapi_client.model.area_restrictions import AreaRestrictions
from openapi_client.model.area_vaccinated import AreaVaccinated
from openapi_client.model.data_sources import DataSources
from openapi_client.model.dated_information import DatedInformation
from openapi_client.model.disease_case import DiseaseCase
from openapi_client.model.disease_infection import DiseaseInfection
from openapi_client.model.link import Link
