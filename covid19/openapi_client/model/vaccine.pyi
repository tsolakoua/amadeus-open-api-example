# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Vaccine(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            supportedVaccineProducts = schemas.StrSchema
            numberOfDoses = schemas.IntSchema
        
            @staticmethod
            def expiration() -> typing.Type['Expiration']:
                return Expiration
            boosterRequired = schemas.StrSchema
        
            @staticmethod
            def boosterExpiration() -> typing.Type['Expiration']:
                return Expiration
        
            @staticmethod
            def validity() -> typing.Type['Validity']:
                return Validity
            __annotations__ = {
                "supportedVaccineProducts": supportedVaccineProducts,
                "numberOfDoses": numberOfDoses,
                "expiration": expiration,
                "boosterRequired": boosterRequired,
                "boosterExpiration": boosterExpiration,
                "validity": validity,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["supportedVaccineProducts"]) -> MetaOapg.properties.supportedVaccineProducts: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numberOfDoses"]) -> MetaOapg.properties.numberOfDoses: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["expiration"]) -> 'Expiration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boosterRequired"]) -> MetaOapg.properties.boosterRequired: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["boosterExpiration"]) -> 'Expiration': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["validity"]) -> 'Validity': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["supportedVaccineProducts", "numberOfDoses", "expiration", "boosterRequired", "boosterExpiration", "validity", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["supportedVaccineProducts"]) -> typing.Union[MetaOapg.properties.supportedVaccineProducts, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numberOfDoses"]) -> typing.Union[MetaOapg.properties.numberOfDoses, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["expiration"]) -> typing.Union['Expiration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boosterRequired"]) -> typing.Union[MetaOapg.properties.boosterRequired, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["boosterExpiration"]) -> typing.Union['Expiration', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["validity"]) -> typing.Union['Validity', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["supportedVaccineProducts", "numberOfDoses", "expiration", "boosterRequired", "boosterExpiration", "validity", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        supportedVaccineProducts: typing.Union[MetaOapg.properties.supportedVaccineProducts, str, schemas.Unset] = schemas.unset,
        numberOfDoses: typing.Union[MetaOapg.properties.numberOfDoses, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        expiration: typing.Union['Expiration', schemas.Unset] = schemas.unset,
        boosterRequired: typing.Union[MetaOapg.properties.boosterRequired, str, schemas.Unset] = schemas.unset,
        boosterExpiration: typing.Union['Expiration', schemas.Unset] = schemas.unset,
        validity: typing.Union['Validity', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Vaccine':
        return super().__new__(
            cls,
            *_args,
            supportedVaccineProducts=supportedVaccineProducts,
            numberOfDoses=numberOfDoses,
            expiration=expiration,
            boosterRequired=boosterRequired,
            boosterExpiration=boosterExpiration,
            validity=validity,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.expiration import Expiration
from openapi_client.model.validity import Validity
