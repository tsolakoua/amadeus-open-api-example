# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class TravelQuarantineModality(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    eligiblePerson = schemas.StrSchema
                    quarantineType = schemas.StrSchema
                    duration = schemas.IntSchema
                    referenceLink = schemas.StrSchema
                    mandateList = schemas.StrSchema
                    
                    
                    class quarantineOnArrivalAreas(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Area']:
                                return Area
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['Area'], typing.List['Area']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'quarantineOnArrivalAreas':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Area':
                            return super().__getitem__(i)
                    __annotations__ = {
                        "eligiblePerson": eligiblePerson,
                        "quarantineType": quarantineType,
                        "duration": duration,
                        "referenceLink": referenceLink,
                        "mandateList": mandateList,
                        "quarantineOnArrivalAreas": quarantineOnArrivalAreas,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["eligiblePerson"]) -> MetaOapg.properties.eligiblePerson: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["quarantineType"]) -> MetaOapg.properties.quarantineType: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["duration"]) -> MetaOapg.properties.duration: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["referenceLink"]) -> MetaOapg.properties.referenceLink: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["mandateList"]) -> MetaOapg.properties.mandateList: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["quarantineOnArrivalAreas"]) -> MetaOapg.properties.quarantineOnArrivalAreas: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["eligiblePerson", "quarantineType", "duration", "referenceLink", "mandateList", "quarantineOnArrivalAreas", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["eligiblePerson"]) -> typing.Union[MetaOapg.properties.eligiblePerson, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["quarantineType"]) -> typing.Union[MetaOapg.properties.quarantineType, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["duration"]) -> typing.Union[MetaOapg.properties.duration, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["referenceLink"]) -> typing.Union[MetaOapg.properties.referenceLink, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["mandateList"]) -> typing.Union[MetaOapg.properties.mandateList, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["quarantineOnArrivalAreas"]) -> typing.Union[MetaOapg.properties.quarantineOnArrivalAreas, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["eligiblePerson", "quarantineType", "duration", "referenceLink", "mandateList", "quarantineOnArrivalAreas", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                eligiblePerson: typing.Union[MetaOapg.properties.eligiblePerson, str, schemas.Unset] = schemas.unset,
                quarantineType: typing.Union[MetaOapg.properties.quarantineType, str, schemas.Unset] = schemas.unset,
                duration: typing.Union[MetaOapg.properties.duration, decimal.Decimal, int, schemas.Unset] = schemas.unset,
                referenceLink: typing.Union[MetaOapg.properties.referenceLink, str, schemas.Unset] = schemas.unset,
                mandateList: typing.Union[MetaOapg.properties.mandateList, str, schemas.Unset] = schemas.unset,
                quarantineOnArrivalAreas: typing.Union[MetaOapg.properties.quarantineOnArrivalAreas, list, tuple, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    eligiblePerson=eligiblePerson,
                    quarantineType=quarantineType,
                    duration=duration,
                    referenceLink=referenceLink,
                    mandateList=mandateList,
                    quarantineOnArrivalAreas=quarantineOnArrivalAreas,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                DatedInformation,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TravelQuarantineModality':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.area import Area
from openapi_client.model.dated_information import DatedInformation
