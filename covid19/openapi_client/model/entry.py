# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class Entry(
    schemas.ComposedSchema,
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                class properties:
                    ban = schemas.StrSchema
                    throughDate = schemas.StrSchema
                    referenceLink = schemas.StrSchema
                    exemptions = schemas.StrSchema
                    
                    
                    class bannedArea(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            @staticmethod
                            def items() -> typing.Type['Area']:
                                return Area
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple['Area'], typing.List['Area']],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'bannedArea':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> 'Area':
                            return super().__getitem__(i)
                    
                    
                    class borderBan(
                        schemas.ListSchema
                    ):
                    
                    
                        class MetaOapg:
                            
                            
                            class items(
                                schemas.DictSchema
                            ):
                            
                            
                                class MetaOapg:
                                    
                                    class properties:
                                        borderType = schemas.StrSchema
                                        status = schemas.StrSchema
                                        __annotations__ = {
                                            "borderType": borderType,
                                            "status": status,
                                        }
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["borderType"]) -> MetaOapg.properties.borderType: ...
                                
                                @typing.overload
                                def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                                
                                @typing.overload
                                def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                                
                                def __getitem__(self, name: typing.Union[typing_extensions.Literal["borderType", "status", ], str]):
                                    # dict_instance[name] accessor
                                    return super().__getitem__(name)
                                
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["borderType"]) -> typing.Union[MetaOapg.properties.borderType, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
                                
                                @typing.overload
                                def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                                
                                def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["borderType", "status", ], str]):
                                    return super().get_item_oapg(name)
                                
                            
                                def __new__(
                                    cls,
                                    *_args: typing.Union[dict, frozendict.frozendict, ],
                                    borderType: typing.Union[MetaOapg.properties.borderType, str, schemas.Unset] = schemas.unset,
                                    status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                                ) -> 'items':
                                    return super().__new__(
                                        cls,
                                        *_args,
                                        borderType=borderType,
                                        status=status,
                                        _configuration=_configuration,
                                        **kwargs,
                                    )
                    
                        def __new__(
                            cls,
                            _arg: typing.Union[typing.Tuple[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]], typing.List[typing.Union[MetaOapg.items, dict, frozendict.frozendict, ]]],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'borderBan':
                            return super().__new__(
                                cls,
                                _arg,
                                _configuration=_configuration,
                            )
                    
                        def __getitem__(self, i: int) -> MetaOapg.items:
                            return super().__getitem__(i)
                    bannedTravellers = schemas.StrSchema
                    __annotations__ = {
                        "ban": ban,
                        "throughDate": throughDate,
                        "referenceLink": referenceLink,
                        "exemptions": exemptions,
                        "bannedArea": bannedArea,
                        "borderBan": borderBan,
                        "bannedTravellers": bannedTravellers,
                    }
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["ban"]) -> MetaOapg.properties.ban: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["throughDate"]) -> MetaOapg.properties.throughDate: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["referenceLink"]) -> MetaOapg.properties.referenceLink: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["exemptions"]) -> MetaOapg.properties.exemptions: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["bannedArea"]) -> MetaOapg.properties.bannedArea: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["borderBan"]) -> MetaOapg.properties.borderBan: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["bannedTravellers"]) -> MetaOapg.properties.bannedTravellers: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["ban", "throughDate", "referenceLink", "exemptions", "bannedArea", "borderBan", "bannedTravellers", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["ban"]) -> typing.Union[MetaOapg.properties.ban, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["throughDate"]) -> typing.Union[MetaOapg.properties.throughDate, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["referenceLink"]) -> typing.Union[MetaOapg.properties.referenceLink, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["exemptions"]) -> typing.Union[MetaOapg.properties.exemptions, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["bannedArea"]) -> typing.Union[MetaOapg.properties.bannedArea, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["borderBan"]) -> typing.Union[MetaOapg.properties.borderBan, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["bannedTravellers"]) -> typing.Union[MetaOapg.properties.bannedTravellers, schemas.Unset]: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ban", "throughDate", "referenceLink", "exemptions", "bannedArea", "borderBan", "bannedTravellers", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *_args: typing.Union[dict, frozendict.frozendict, ],
                ban: typing.Union[MetaOapg.properties.ban, str, schemas.Unset] = schemas.unset,
                throughDate: typing.Union[MetaOapg.properties.throughDate, str, schemas.Unset] = schemas.unset,
                referenceLink: typing.Union[MetaOapg.properties.referenceLink, str, schemas.Unset] = schemas.unset,
                exemptions: typing.Union[MetaOapg.properties.exemptions, str, schemas.Unset] = schemas.unset,
                bannedArea: typing.Union[MetaOapg.properties.bannedArea, list, tuple, schemas.Unset] = schemas.unset,
                borderBan: typing.Union[MetaOapg.properties.borderBan, list, tuple, schemas.Unset] = schemas.unset,
                bannedTravellers: typing.Union[MetaOapg.properties.bannedTravellers, str, schemas.Unset] = schemas.unset,
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *_args,
                    ban=ban,
                    throughDate=throughDate,
                    referenceLink=referenceLink,
                    exemptions=exemptions,
                    bannedArea=bannedArea,
                    borderBan=borderBan,
                    bannedTravellers=bannedTravellers,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                DatedInformation,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Entry':
        return super().__new__(
            cls,
            *_args,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.area import Area
from openapi_client.model.dated_information import DatedInformation
