# coding: utf-8

"""
    Travel Restrictions

    Before using this API, we recommend you read our **[Authorization Guide](https://developers.amadeus.com/self-service/apis-docs/guides/authorization-262)** for more information on how to generate an access token.   # noqa: E501

    The version of the OpenAPI document: 2.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class AreaAccessRestriction(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Restriction applying to enter or leave the Area
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def transportation() -> typing.Type['Transportation']:
                return Transportation
        
            @staticmethod
            def declarationDocuments() -> typing.Type['DeclarationDocuments']:
                return DeclarationDocuments
        
            @staticmethod
            def entry() -> typing.Type['Entry']:
                return Entry
        
            @staticmethod
            def travelTest() -> typing.Type['TravelTest']:
                return TravelTest
        
            @staticmethod
            def tracingApplication() -> typing.Type['TracingApplication']:
                return TracingApplication
        
            @staticmethod
            def masks() -> typing.Type['Masks']:
                return Masks
        
            @staticmethod
            def exit() -> typing.Type['Exit']:
                return Exit
        
            @staticmethod
            def otherRestrictions() -> typing.Type['DatedInformation']:
                return DatedInformation
        
            @staticmethod
            def travelVaccination() -> typing.Type['TravelVaccination']:
                return TravelVaccination
        
            @staticmethod
            def travelQuarantineModality() -> typing.Type['TravelQuarantineModality']:
                return TravelQuarantineModality
        
            @staticmethod
            def areaHealthPass() -> typing.Type['AreaHealthPass']:
                return AreaHealthPass
            __annotations__ = {
                "transportation": transportation,
                "declarationDocuments": declarationDocuments,
                "entry": entry,
                "travelTest": travelTest,
                "tracingApplication": tracingApplication,
                "masks": masks,
                "exit": exit,
                "otherRestrictions": otherRestrictions,
                "travelVaccination": travelVaccination,
                "travelQuarantineModality": travelQuarantineModality,
                "areaHealthPass": areaHealthPass,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["transportation"]) -> 'Transportation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["declarationDocuments"]) -> 'DeclarationDocuments': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["entry"]) -> 'Entry': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travelTest"]) -> 'TravelTest': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["tracingApplication"]) -> 'TracingApplication': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["masks"]) -> 'Masks': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["exit"]) -> 'Exit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["otherRestrictions"]) -> 'DatedInformation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travelVaccination"]) -> 'TravelVaccination': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["travelQuarantineModality"]) -> 'TravelQuarantineModality': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["areaHealthPass"]) -> 'AreaHealthPass': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["transportation", "declarationDocuments", "entry", "travelTest", "tracingApplication", "masks", "exit", "otherRestrictions", "travelVaccination", "travelQuarantineModality", "areaHealthPass", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["transportation"]) -> typing.Union['Transportation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["declarationDocuments"]) -> typing.Union['DeclarationDocuments', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["entry"]) -> typing.Union['Entry', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travelTest"]) -> typing.Union['TravelTest', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["tracingApplication"]) -> typing.Union['TracingApplication', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["masks"]) -> typing.Union['Masks', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["exit"]) -> typing.Union['Exit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["otherRestrictions"]) -> typing.Union['DatedInformation', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travelVaccination"]) -> typing.Union['TravelVaccination', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["travelQuarantineModality"]) -> typing.Union['TravelQuarantineModality', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["areaHealthPass"]) -> typing.Union['AreaHealthPass', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["transportation", "declarationDocuments", "entry", "travelTest", "tracingApplication", "masks", "exit", "otherRestrictions", "travelVaccination", "travelQuarantineModality", "areaHealthPass", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        transportation: typing.Union['Transportation', schemas.Unset] = schemas.unset,
        declarationDocuments: typing.Union['DeclarationDocuments', schemas.Unset] = schemas.unset,
        entry: typing.Union['Entry', schemas.Unset] = schemas.unset,
        travelTest: typing.Union['TravelTest', schemas.Unset] = schemas.unset,
        tracingApplication: typing.Union['TracingApplication', schemas.Unset] = schemas.unset,
        masks: typing.Union['Masks', schemas.Unset] = schemas.unset,
        exit: typing.Union['Exit', schemas.Unset] = schemas.unset,
        otherRestrictions: typing.Union['DatedInformation', schemas.Unset] = schemas.unset,
        travelVaccination: typing.Union['TravelVaccination', schemas.Unset] = schemas.unset,
        travelQuarantineModality: typing.Union['TravelQuarantineModality', schemas.Unset] = schemas.unset,
        areaHealthPass: typing.Union['AreaHealthPass', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AreaAccessRestriction':
        return super().__new__(
            cls,
            *_args,
            transportation=transportation,
            declarationDocuments=declarationDocuments,
            entry=entry,
            travelTest=travelTest,
            tracingApplication=tracingApplication,
            masks=masks,
            exit=exit,
            otherRestrictions=otherRestrictions,
            travelVaccination=travelVaccination,
            travelQuarantineModality=travelQuarantineModality,
            areaHealthPass=areaHealthPass,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.area_health_pass import AreaHealthPass
from openapi_client.model.dated_information import DatedInformation
from openapi_client.model.declaration_documents import DeclarationDocuments
from openapi_client.model.entry import Entry
from openapi_client.model.exit import Exit
from openapi_client.model.masks import Masks
from openapi_client.model.tracing_application import TracingApplication
from openapi_client.model.transportation import Transportation
from openapi_client.model.travel_quarantine_modality import TravelQuarantineModality
from openapi_client.model.travel_test import TravelTest
from openapi_client.model.travel_vaccination import TravelVaccination
